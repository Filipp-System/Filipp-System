@page "/"
@using FilippSystem.Learning.Workflow.Client.Models;


<EditForm Model="@RegistrationModel" OnValidSubmit="@HandleFormSubmission" hidden="@ShowConfirmation" Context="RegistrationForm">
    <DxFormLayout>

        <h1 class="h3 mb-3 font-weight-normal">Bitte registrieren Sie sich</h1>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <DxFormLayoutItem Caption="Name" ColSpanMd="6">
            <Template>
                <DxTextBox @bind-Text="@RegistrationModel.Name"></DxTextBox>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Email" ColSpanMd="6">
            <Template>
                <DxTextBox @bind-Text="@RegistrationModel.Email"></DxTextBox>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Password" ColSpanMd="6">
            <Template>
                <DxTextBox Password="true" @bind-Text="@RegistrationModel.Password" NullText="Schreiben Sie ein starkes Password..."></DxTextBox>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Repeat Password" ColSpanMd="6">
            <Template>
                <DxTextBox Password="true" @bind-Text="@RegistrationModel.RepeatPassword" NullText="Wiederholen Sie ihr Passwort..."></DxTextBox>
            </Template>
        </DxFormLayoutItem>
        <DxButton SubmitFormOnClick="true" Text="Registrieren" RenderStyle="@ButtonRenderStyle.Secondary" />
    </DxFormLayout>
</EditForm>

<div hidden="@(!ShowConfirmation)">
    Danke für die Registrierung. Bitte überprüfen Sie Ihre E-Mail.
</div>


@code
{

    private RegistrationModel RegistrationModel { get; set; } = new RegistrationModel();
    private bool ShowConfirmation { get; set; } = false;

    private async Task HandleFormSubmission()
    {
        // TODO: add workflow invoke logic
        ShowConfirmation = true;
    }
}
