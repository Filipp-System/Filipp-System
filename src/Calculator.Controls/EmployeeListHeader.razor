@using Calculator.Model
@using Task = System.Threading.Tasks.Task
@inject IEmployeeFilters Filters

<div class="row employee-header">
    <div class="@Columns.EditColumn">&nbsp;</div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.LastName)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.LastName))">
        <SortIndicator Column="@(EmployeeFilterColumns.LastName)"/> Nachname
    </div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.PhoneNumber)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.PhoneNumber))">
        <SortIndicator Column="@(EmployeeFilterColumns.PhoneNumber)"/> 📞 Telefon
    </div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.Street)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.Street))">
        <SortIndicator Column="@(EmployeeFilterColumns.Street)"/> 🏠 Straße
    </div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.City)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.City))">
        <SortIndicator Column="@(EmployeeFilterColumns.City)"/> Stadt
    </div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.ZipCode)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.ZipCode))">
        <SortIndicator Column="@(EmployeeFilterColumns.ZipCode)"/> PLZ
    </div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.Profession)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.Profession))">
        <SortIndicator Column="@(EmployeeFilterColumns.Profession)"/> Beruf
    </div>
    <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.Salary)"
         @onclick="@(async () => await ToggleAsync(EmployeeFilterColumns.Salary))">
        <SortIndicator Column="@(EmployeeFilterColumns.Salary)"/> Gehalt
    </div>
</div>

@code {

    /// <summary>
    /// The <see cref="GridWrapper"/> reference.
    /// </summary>
    [CascadingParameter]
    public GridWrapper GridWrapper { get; set; }

    /// <summary>
    /// Column service
    /// </summary>
    public ColumnService Columns = new ColumnService();

    /// <summary>
    /// Either starting a new sort or toggling asc/desc for the current.
    /// </summary>
    /// <param name="column">The <see cref="EmployeeFilterColumns"/> being toggled.</param>
    private Task ToggleAsync(EmployeeFilterColumns column)
    {
        if (Filters.SortColumn == column)
        {
            Filters.SortAscending = !Filters.SortAscending;
        }
        else
        {
            Filters.SortColumn = column;
        }

        return GridWrapper.FilterChanged.InvokeAsync(this);
    }

}