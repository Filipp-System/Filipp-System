@using Calculator.Model;
@using Microsoft.AspNetCore.Components.Forms;
@using Task = System.Threading.Tasks.Task
@using System.Globalization


<h1>@Mode Mitarbeiter</h1>
<hr />
@if (Employee != null)
{
<EditForm Model="@Employee" OnInvalidSubmit="async () => await HandleSubmitAsync(false)"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h2>🆔 Identifikation</h2>
    <p>
        <label>
            Vorname:
            <InputText @bind-Value="Employee.FirstName" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.FirstName" />
        </label>
        <label>
            Nachname:
            <InputText @bind-Value="Employee.LastName" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.LastName" />
        </label>
    </p>
    <h2>📞 Telefon</h2>
    <p>
        <label>
            Telefon (optional):
            <InputText @bind-Value="Employee.PhoneNumber" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.PhoneNumber" />
        </label>
    </p>
    <h2>🏠 Adresse</h2>
    <p>
        <label>
            Straße:
            <InputText @bind-Value="Employee.Street" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.Street" />
        </label>
        <label>
            Hausnummer:
            <InputText @bind-Value="Employee.HouseNumber.ToString()" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.HouseNumber.ToString()" />
        </label>
        <label>
            Hausnummer Zusatz:
            <InputText @bind-Value="Employee.HouseNumberExtension" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.HouseNumberExtension" />
        </label>
        <label>
            Stadt:
            <InputText @bind-Value="Employee.City" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.City" />
        </label>
        <label>
            Postleitzahl:
            <InputText @bind-Value="Employee.ZipCode.ToString()" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.ZipCode.ToString()" />
        </label>
    </p>
    <h2>Angestellten Informationen</h2>
    <p>
        <label>
            Beruf:
            <InputText @bind-Value="Employee.Profession" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.Profession" />
        </label>
        <label>
            Gehalt:
            <InputText @bind-Value="Employee.Salary.ToString(CultureInfo.InvariantCulture)" />
            <ConcurrencyField Model="@Employee" DbModel="@DbEmployee" Property="obj => obj?.Salary.ToString()" />
        </label>
    </p>
    <br />
    <button disabled="@Busy" class="btn btn-warning" @onclick="@(async  () => await  CancelAsync())">Abbrechen</button>&nbsp;
    <button disabled="@Busy" type="submit" class="btn btn-primary">Senden</button>
</EditForm>
}
@code {

    /// <summary>
    /// Let parent handle result of validation.
    /// </summary>
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    /// <summary>
    /// Let parent handle the cancel.
    /// </summary>
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    /// <summary>
    /// <c>True</c> if add mode.
    /// </summary>
    [Parameter]
    public bool IsAdd { get; set; }

    /// <summary>
    /// The <see cref="Employee"/> to upset.
    /// </summary>
    [Parameter]
    public Employee Employee { get; set; }

    /// <summary>
    /// The database version of <see cref="Employee"/> if a concurrency issue exists.
    /// </summary>
    [Parameter]
    public Employee DbEmployee { get; set; }

    /// <summary>
    /// Prevent multiple asynchronous operations at the same time.
    /// </summary>
    [Parameter]
    public bool Busy { get; private set; }

    /// <summary>
    /// Mode
    /// </summary>
    private string Mode => IsAdd ? "Anlegen" : "Bearbeiten";

    /// <summary>
    /// Ask to cancel.
    /// </summary>
    /// <returns></returns>
    private async Task CancelAsync()
    {
        await CancelRequest.InvokeAsync(null);
    }

    /// <summary>
    /// Handle form submission request.
    /// </summary>
    /// <param name="isValid"><c>True</c> when field validation passed.</param>
    /// <returns></returns>
    private async Task HandleSubmitAsync(bool isValid)
    {
        await ValidationResult.InvokeAsync(isValid);
    }

}
