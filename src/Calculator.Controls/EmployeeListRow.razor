@using Calculator.Model;
@using Task = System.Threading.Tasks.Task

@inject IEmployeeFilters Filters

@if (CurrentEmployee != null)
{
    <div class="row employee-detail">
        <div class="@Columns.EditColumn text-right">
            <a title="Edit" href="/edit/@CurrentEmployee?.EmployeeID">
                &nbsp;üìù&nbsp;
            </a>
            @if (CanDelete)
            {
                <span @onclick="async () => await DeleteRequestAsync()" title="Delete"
                       class="d-none d-sm-inline clickable red">
                    ‚ùå
                </span>
            }
            else
            {
                <span>&nbsp;</span>
            }
            &nbsp;
        </div>
        <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.LastName)">
            <a href="@ViewLink" alt="View Details" title="View Details">
                @Name
            </a>
        </div>
        @if (!DeleteConfirmation)
        {
            <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.PhoneNumber)">
                @CurrentEmployee.PhoneNumber
            </div>
            <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.Street)">
                @CurrentEmployee.Street
            </div>
            <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.City)">
                @CurrentEmployee.City
            </div>
            <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.ZipCode)">
                @CurrentEmployee.Zi
            </div>
            <div class="@Columns.GetClassForColumn(EmployeeFilterColumns.Profession)">
                @CurrentEmployee.Profession
            </div>
        }
        else
        {
            <div class="@Columns.DeleteConfirmation">
                <DeletePrompt Confirmation="ConfirmAsync" />
            </div>
        }
    </div>
}


@code {

    /// <summary>
    /// Map classes to columns.
    /// </summary>
    public ColumnService Columns = new ColumnService();

    /// <summary>
    /// The <see cref="Employee"/> being rendered.
    /// </summary>
    [Parameter]
    public Employee CurrentEmployee { get; set; }

    /// <summary>
    /// The <see cref="GridWrapper"/> reference.
    /// </summary>
    [CascadingParameter]
    public GridWrapper GridWrapper { get; set; }

    /// <summary>
    /// Delegate to delete the <see cref="Employee"/>.
    /// </summary>
    [Parameter]
    public EventCallback<Employee> DeleteEmployee { get; set; }

    public bool CanDelete => !DeleteConfirmation &&
        (GridWrapper.DeleteRequestId == 0 || GridWrapper.DeleteRequestId == CurrentEmployee?.EmployeeID);

    /// <summary>
    /// Navigation to view.
    /// </summary>
    public string ViewLink => $"/View/{CurrentEmployee?.EmployeeID}";

    /// <summary>
    /// Confirm the delete.
    /// </summary>
    public bool DeleteConfirmation { get; set; }

    /// <summary>
    /// Track changes
    /// </summary>
    private int _lastEmployee = -1;

    /// <summary>
    /// Reset when new employee is attached
    /// </summary>
    protected override void OnParametersSet()
    {
        if (CurrentEmployee != null && CurrentEmployee.EmployeeID != _lastEmployee)
        {
            _lastEmployee = CurrentEmployee.EmployeeID;
            DeleteConfirmation = false;
        }
        base.OnParametersSet();
    }

    /// <summary>
    /// Called based on confirmation.
    /// </summary>
    /// <param name="confirmed"><c>True</c> when confirmed</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;
            await GridWrapper.DeleteRequested.InvokeAsync(0);
        }
    }

    /// <summary>
    /// Set delete to true.
    /// </summary>
    public Task DeleteRequestAsync()
    {
        DeleteConfirmation = true;
        return GridWrapper.DeleteRequested.InvokeAsync(CurrentEmployee.EmployeeID);
    }

    /// <summary>
    /// Deletes the <see cref="Employee"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task DeleteAsync()
    {
        return DeleteEmployee.InvokeAsync(CurrentEmployee);
    }

    /// <summary>
    /// Correctly formatted name.
    /// </summary>
    public string Name => Filters.ShowFirstNameFirst ?
        $"{CurrentEmployee?.FirstName} {CurrentEmployee?.LastName}" :
        $"{CurrentEmployee?.LastName}, {CurrentEmployee?.FirstName}";  

}